<%- include('headers.ejs') %>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
  <style>
    /* crop */
    #overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 998;
}

#cropModal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 999;
    background: white;
    padding: 20px;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    align-items: center;
    
    display: none

}

#cropButton {
    cursor: pointer;
    margin-top: 10px;
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
}

#cropButton:hover {
    background-color: #0056b3;
}

    /* General styling */
    body {
      font-family: Arial, sans-serif;
      background-color: #ffffff;
    }

    .card-body {
      max-width: 500px;
      margin: 20px auto;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
    }

    /* Crop modal styling */
    #cropModal {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: white;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 8px;
      z-index: 999;
      box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
    }

    #croppingImage {
      max-width: 100%;
    }

    /* .overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 5;
    } */
  </style>
    <!-- Template CSS -->
    <link
      href="/admin/assets/css/main.css"
      rel="stylesheet"
      type="text/css"
    />
    <link
    href="https://fonts.googleapis.com/icon?family=Material+Icons"
    rel="stylesheet"
  />
  <style>
    .navbar-aside {
      width: 250px;
      height: 100vh;
      position: fixed;
      left: 0;
      top: 0;
      background: #fff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      z-index: 1000;
    }
    .aside-top {
      padding: 1rem;
      border-bottom: 1px solid #eee;
    }
    .brand-wrap {
      display: flex;
      align-items: center;
    }
    .menu-aside {
      padding: 0;
      list-style: none;
    }
    .menu-item {
      border-bottom: 1px solid #eee;
    }
    .menu-link {
      display: flex;
      align-items: center;
      padding: 10px 1rem;
      color: #333;
      text-decoration: none;
      transition: background-color 0.3s;
    }
    .menu-link:hover,
    .menu-item.active .menu-link {
      background-color: #f8f9fa;
    }
    .menu-link i {
      margin-right: 10px;
    }
  </style>
  
 
    <main class="main-wrap">
    
      
      
      
      <section class="content-main">
        <div class="content-header">
          <div>
            <h2 class="content-title card-title">Products</h2>
            <p>Edit Product</p>
          </div>
          <div>
           
          </div>
        </div>
        <div class="card">
          
            <div class="row">
              <div class="col-md-3" style="width: 2000px">
                <form
                id="productForm"
                method="post"
                action="/admin/editProduct/<%= product._id %>"
                enctype="multipart/form-data"
                onsubmit="return validateForm()"
            >
            
                <div class="mb-4">
                    <label for="product_name" class="form-label">Product title</label>
                    <input
                        type="text"
                        placeholder="Type here"
                        name="product_title"
                        class="form-control"
                        id="product_name"
                        value="<%= product.product_title %>"
                    />
                </div>
            
                <div class="mb-4">
                    <label class="form-label">Full description</label>
                    <textarea
                        placeholder="Type here"
                        name="full_description"
                        class="form-control"
                        id="product_description"
                    > <%= product.full_description %> </textarea>
                </div>
            
                <div class="row mb-4">
                    <div class="col-lg-6">
                        <label class="form-label">Price</label>
                        <input
                            placeholder="₹"
                            type="text"
                            class="form-control"
                            name="price"
                            value="<%= product.price %>"
                            id="price"
                        />
                        <span id="priceError" class="text-danger" style="display: none;">Price cannot be less than 0.</span>
                    </div>
            
                    <div class="col-lg-6">
                        <label class="form-label">Stock</label>
                        <input
                            placeholder="Stock"
                            type="text"
                            class="form-control"
                            name="stock"
                            id="stock"
                            value="<%= product.stock %>"
                        />
                        <span id="stockError" class="text-danger" style="display: none;">Stock cannot be less than 0.</span>
                    </div>
                </div>
            
                <div class="row mb-4">
                    <div class="col-lg-6">
                        <label class="form-label">Category</label>
                        <select class="form-select" name="category" id="product_category">
                            <% if (category && category.length > 0) { %>
                                <% category.forEach(cat => { %>
                                    <option 
                                        value="<%= cat._id %>" 
                                        <%= product.category._id.equals(cat._id) ? 'selected' : '' %> >
                                        <%= cat.name %>
                                    </option>
                                <% }) %>
                            <% } else { %>
                                <option>No categories available</option>
                            <% } %>
                        </select>
                    </div>
            
                    <div class="col-lg-6">
                        <label class="form-label">Brand</label>
                        <select class="form-select" name="brand" id="product_brand">
                            <% brand.forEach(brand => { %>
                                <option 
                                    value="<%= brand._id %>" 
                                    <%= product.brand._id.equals(brand._id) ? 'selected' : '' %> >
                                    <%= brand.name %>
                                </option>
                            <% }) %>
                        </select>
                    </div>
                </div>
            
                <div class="mb-4">
                    <div class="input-upload">
                        <input class="form-control" id="product_image" type="file" name="image_url" accept="image/*" multiple onchange="handleFiles(event)" />
                        <span id="imageError" class="text-danger"></span>
                    </div>
                    <div id="imagePreview" style="width: 108px; display: flex;" class="mt-3">
                      <% if (product.image_url) { %>
                          <% for(let i = 0; i < product.image_url.length; i++) { %>
                              <img style="margin-left: 33px; cursor: pointer;" src="/uploads/<%= product.image_url[i] %>" alt="Product Image" onclick="previewExistingImage('/uploads/<%= product.image_url[i] %>', this)" />
                              <button type="button"style=" background-color: transparent !important; border-color: transparent !important;" onclick="deleteImage('<%= product._id %>', '<%= product.image_url[i] %>')">X</button>

                              
                          <% }} else { %>
                              <p>No image available</p>
                          <% } %>
                  </div>
                  
                </div>
            
                <button type="submit" class="btn btn-primary">Edit Product</button>
            
                <!-- Crop Modal -->
                <!-- <div id="cropModal" style="display: none;">
                    <img id="croppingImage" />
                    <button type="button" id="cropButton" onclick="cropImage()">Crop Image</button>
                </div> -->
                <!-- Modal and Overlay -->
<div id="cropModal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10; background: white; padding: 20px; border-radius: 10px;">
  <img id="croppingImage" style="max-width: 100%; max-height: 300px;" />
  <button type="button" id="cropButton" style="margin-top: 10px;">Crop Image</button>
</div>
<div id="overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 5;"></div>

                
                <!-- <button type="button" id="cropButton">Crop Image</button> -->

                <!-- <div id="overlay" style="display: none;"></div> -->
            
            </form>
</div>
</div>
</div>
</section>

             
      <footer class="main-footer font-xs">
        <div class="row pb-30 pt-15">
          <div class="col-sm-6">
            <script>
              document.write(new Date().getFullYear());
            </script>
            ©, Evara - HTML Ecommerce Template .
          </div>
          <div class="col-sm-6">
            <div class="text-sm-end">All rights reserved</div>
          </div>
        </div>
      </footer>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>let cropper;
  let currentFile;
  let currentImgElement;
  let filesArray = [];
  let existingImagesArray = [];
  let croppedFileIndex;
  
  function handleFiles(event) {
      const imagePreviewContainer = document.getElementById("imagePreview");
      const files = event.target.files;
      const newFilesArray = Array.from(files);
  
      newFilesArray.forEach((file, index) => {
          const reader = new FileReader();
  
          reader.onload = (e) => {
              currentFile = file;
              const img = document.createElement("img");
              img.src = e.target.result;
              img.style.width = "100px";
              img.style.marginRight = "10px";
              img.style.cursor = "pointer";
              img.dataset.index = filesArray.length + index; // Assign unique index
              img.onclick = () => openCropper(e.target.result, img, parseInt(img.dataset.index));
              imagePreviewContainer.appendChild(img);
          };
  
          reader.readAsDataURL(file);
      });
  
      filesArray.push(...newFilesArray);
  }
  
  function openCropper(imageSrc, imgElement, index) {
      const cropModal = document.getElementById("cropModal");
      const croppingImage = document.getElementById("croppingImage");
      const overlay = document.getElementById("overlay");
  
      // Close any active cropper
      if (cropper) {
          cropper.destroy();
          cropper = null;
      }
  
      currentImgElement = imgElement;
      croppedFileIndex = index;
  
      croppingImage.src = imageSrc;
      cropModal.style.display = "block";
      overlay.style.display = "block";
  
      // Initialize Cropper
      croppingImage.onload = () => {
          cropper = new Cropper(croppingImage, {
              viewMode: 1,
              dragMode: 'move',
              autoCropArea: 0.8,
              responsive: true,
              background: false,
          });
      };
  }
  
  document.addEventListener("DOMContentLoaded", () => {
      const cropButton = document.getElementById("cropButton");
  
      if (cropButton) {
        cropButton.addEventListener("click", () => {
    if (!cropper) {
        console.error("Cropper is not initialized.");
        return;
    }

    const canvas = cropper.getCroppedCanvas();

    if (!canvas) {
        console.error("Canvas not created.");
        return;
    }

    canvas.toBlob((blob) => {
        // Fallback in case currentFile is not set
        const fileName = currentFile ? currentFile.name : `cropped_image_${Date.now()}.png`;

        const croppedFile = new File([blob], fileName, { type: 'image/png' });

        filesArray[croppedFileIndex] = croppedFile;

        const dataTransfer = new DataTransfer();

        existingImagesArray.forEach((image) => dataTransfer.items.add(image));
        filesArray.forEach((file) => dataTransfer.items.add(file));

        const fileInput = document.getElementById('product_image');
        fileInput.files = dataTransfer.files;

        currentImgElement.src = URL.createObjectURL(croppedFile);

        document.getElementById("cropModal").style.display = "none";
        document.getElementById("overlay").style.display = "none";

        cropper.destroy();
        cropper = null;
    }, 'image/png');
});
} else {
          console.error("Crop button not found in the DOM.");
      }
  });
  
  function previewExistingImage(imageSrc, imgElement) {
      openCropper(imageSrc, imgElement, null);
  }
  
  function initializeExistingImages(existingImages) {
      existingImagesArray = existingImages;
      const imagePreviewContainer = document.getElementById("imagePreview");
  
      existingImagesArray.forEach((image) => {
          const img = document.createElement("img");
          img.src = image;
          img.style.width = "100px";
          img.style.marginRight = "10px";
          img.style.cursor = "pointer";
          img.onclick = () => previewExistingImage(image, img);
          imagePreviewContainer.appendChild(img);
      });
  }
  </script>
    

 <script>
  document.addEventListener("DOMContentLoaded", function () {
    // Validation function
    function validateForm() {
        // Get the values from the form
        const price = parseFloat(document.getElementById("price").value);
        const stock = parseInt(document.getElementById("stock").value);
        const productName = document.getElementById("product_name").value.trim();
        const description = document.getElementById("product_description").value.trim();
        const category = document.getElementById("product_category").value;
        const brand = document.getElementById("product_brand").value;
        const imageInput = document.getElementById("product_image");
        const imagePreview = document.getElementById("imagePreview");

        let isValid = true;
        
        // Product name validation
        if (productName === "") {
            Swal.fire("Error", "Product title cannot be empty.", "error");
            return false;
        }

        // Description validation
        if (description === "") {
            Swal.fire("Error", "Product description cannot be empty.", "error");
            return false;
        }

        // Price validation
        if (price < 0 || isNaN(price)) {
            document.getElementById("priceError").style.display = 'inline';
            isValid = false;
        } else {
            document.getElementById("priceError").style.display = 'none';
        }

        // Stock validation
        if (stock < 0 || isNaN(stock)) {
            document.getElementById("stockError").style.display = 'inline';
            isValid = false;
        } else {
            document.getElementById("stockError").style.display = 'none';
        }

        // Category validation
        if (category === "") {
            Swal.fire("Error", "Please select a category.", "error");
            return false;
        }

        // Brand validation
        if (brand === "") {
            Swal.fire("Error", "Please select a brand.", "error");
            return false;
        }

        // Image validation (ensures at least one image is selected)
        if (imageInput.files.length === 0 && imagePreview.children.length === 0) {
            document.getElementById("imageError").textContent = "Please upload at least one image.";
            isValid = false;
        } else {
            document.getElementById("imageError").textContent = "";
        }

        return isValid;
    }

    // Image preview function
    function handleFiles(event) {
        const files = event.target.files;
        const imagePreview = document.getElementById("imagePreview");
        imagePreview.innerHTML = ""; // Clear previous images

        if (files.length > 0) {
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const reader = new FileReader();

                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.style.marginLeft = "10px";
                    img.style.width = "100px";
                    img.style.cursor = "pointer";
                    imagePreview.appendChild(img);
                };

                reader.readAsDataURL(file);
            }
        }
    }

    // Image deletion function
    function deleteImage(productId, imageUrl) {
        Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, delete it!"
        }).then((result) => {
            if (result.isConfirmed) {
                console.log(`Deleting image ${imageUrl} for product ${productId}`);
                Swal.fire("Deleted!", "Your image has been deleted.", "success");
            }
        });
    }

    // Function to preview existing images
    function previewExistingImage(imageSrc, element) {
        document.getElementById("croppingImage").src = imageSrc;
        document.getElementById("cropModal").style.display = "block";
        document.getElementById("overlay").style.display = "block";
    }

    // Hide crop modal
    document.getElementById("overlay").onclick = function () {
        document.getElementById("cropModal").style.display = "none";
        document.getElementById("overlay").style.display = "none";
    };

    // Attach validation function to form submission
    document.querySelector("form").onsubmit = function (event) {
        if (!validateForm()) {
            event.preventDefault();
        }
    };
});
 </script>
  
    
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

<!-- <script>
  function deleteImage(productId, filename) {
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to delete this image?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            // Send DELETE request to the server
            fetch(`/admin/deleteProductImage/${productId}/${filename}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Deleted!', data.message, 'success');

                    // Remove the deleted image from the DOM
                    const imgElement = document.querySelector(`[data-filename="${filename}"]`);
                    if (imgElement) {
                        imgElement.parentElement.remove(); // Remove the container
                    }
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error deleting image:', error);
                Swal.fire('Error', 'An error occurred while deleting the image.', 'error');
            });
        } else {
            console.log("User canceled the deletion.");
        }
    });
}

</script> -->








<script>
  function deleteImage(productId, filename) {
    Swal.fire({
      title: 'Are you sure?',
      text: "Do you want to delete this image?",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      if (result.isConfirmed) {

        Swal.fire({
          title: 'Processing...',
          text: 'Please wait while we delete the image.',
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          }
        });

        fetch(`/admin/deleteProductImage/${productId}/${filename}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
        })
        .then(response => response.json())
        .then(data => {
          Swal.close(); 
          if (data.success) {
            Swal.fire('Deleted!', data.message, 'success');
           
            window.location.reload()
          
          } else {
            Swal.fire('Error', data.message, 'error');
          }
        })
        .catch(error => {
          Swal.close(); 
          console.error('Error deleting image:', error);
          Swal.fire('Error', 'An error occurred while deleting the image.', 'error');
        });
      } else {
        console.log("User canceled the deletion.");
      }
    });
  }
</script>



    <script src="/admin/assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="/admin/assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="/admin/assets/js/vendors/select2.min.js"></script>
    <script src="/admin/assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="/admin/assets/js/vendors/jquery.fullscreen.min.js"></script>
    <script
      src="/admin/assets/js/main.js"
      type="text/javascript"
    ></script>
  
  </body>

</html>
